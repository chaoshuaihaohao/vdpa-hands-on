# Playbook to set up a basic vdpa-net host on Fedora30
#
#
- hosts: kvm_host  
  remote_user: chenhao  # 替换为您的远程用户名  
  become: yes                 # 如果需要root权限  
  become_method: sudo        # 或者使用其他的提权方式  
  become_user: root          # 如果需要特定的用户来执行命令  
  vars_files:
    - vars/nest-vdpa-net-kernel_settings.yml
  tasks:
    - debug: 
        msg: Debug mode is enabled
    - name: install dependencies
      yum:
        name:
          - qemu-kvm
          - libvirt-daemon-kvm
          - libvirt
          - iperf3
          - virt-install
          - libguestfs-tools-c
          - python3-lxml
          - fuse-sshfs
        state: installed
      become: yes

# modify /etc/libvirt/qemu.conf user = "root", group = "root" and add
# cgroup_device_acl = [
#    "/dev/null", "/dev/full", "/dev/zero",
#    "/dev/random", "/dev/urandom",
#    "/dev/ptmx", "/dev/kvm",
#    "/dev/net/tun"
#]


# In order to run libvirt commands, we need to add the user to the
# libvirt group
    - name: Add user to libvirt group 
      user:
        groups:
          - libvirt
        name: "{{ ansible_facts['user_id'] }}"
        append: yes
      become: yes

    - name: Restart libvirtd
      service:
        name: libvirtd
        state: restarted
      become: yes

    - name: Check if /mnt/nfs exists
      stat:
        path: /mnt/nfs
      register: nfs_dir
      ignore_errors: true
      become: yes

    - name: Create /mnt/nfs if it does not exist
      file:
        path: /mnt/nfs
        state: directory
        mode: '0755'
      when: not nfs_dir.stat.exists

#    - name: umount /mnt/nfs if it's mounted
#      mount:
#        path: /mnt/nfs
#        state: unmounted
#      become: yes

#    - name: mount source dir to /mnt/nfs
#      shell: sshfs -o rw,allow_other root@10.2.20.56:/home/hao/nfs /mnt/nfs
      #delegate_to: localhost
#      become: yes

    - name: Restart libvirtd
      service:
        name: libvirtd
        state: restarted
      become: yes

# Download base image if it does not exist
#  - name: Check if the base image file exists
#    stat:
#      path: "{{ base_image_file }}"
#    register: base_image
    
    # Create our VM image using the base image as backing store
#  - name: Create image
#    command: >
#        qemu-img create -f qcow2 -F qcow2 -b 
#         {{ base_image_file }}
#         {{ vm_image_file }}
#         20G
#    become: yes

#  - name: Prepare image
#    command: >
#       virt-sysprep --root-password password:{{ guest_root_password }}
#         --uninstall cloud-init 
#         --selinux-relabel 
#         -a {{ vm_image_file }}
#    environment:
#      LLIBVIRT_DEFAULT_URI: qemu:///system
#    become: yes

# Create and start the default network
    - name: Define virtio default network
      virt_net:
        command: define
        name: virtio-default
        xml: "{{ lookup('file', 'virtio-default-network.xml') }}"
    
    - name: Start virtio default network
      virt_net:
        state: active
        name: virtio-default
    - name: Start default network
      virt_net:
        state: active
        name: default

# Create the L1-src VM
# Before actually creating it, let's ensure there is no VM with the same name
# is already configured
    - name: Destroy the guest L1-src VM (in case name colision)
      virt:
        name: "{{ guest_l1_src_name }}"
        state: destroyed
      ignore_errors: true
    
    - name: Undefine guest L1-src vm (in case name colision)
      virt:
        command: undefine
        name: "{{ guest_l1_src_name }}"
      ignore_errors: true

    - name: Define the L1-src VM
      virt:
        command: define
        name: "{{ guest_l1_src_name}}"
        xml: "{{ lookup('template', 'nested-vdpa-net_guest_L1_src.xml.j2') }}"
        autostart: no

    - name: 加载tun模块
      modprobe:
        name: tun
        state: present

    - name: Start the L1-src VM
      virt:
        name: "{{ guest_l1_src_name}}"
        state: running
# virsh run as system permission
        uri: qemu:///system
      register: l1_src_vm_start_result
      become: yes

    - name: Get the IP address of the virtual machine L1-src
      shell: virsh domifaddr {{ guest_l1_src_name }}
      register: l1_src_vm_ip_result
      ignore_errors: yes

    - name: Display the IP address of the virtual machine L1-src
      debug:
        var: l1_src_vm_ip_result
      when: l1_src_vm_ip_result.rc == 0

    - debug: 
        msg: >
          "Now the Guest VM is running. To go inside the VM type
          virsh console {{ guest_l1_src_name }}"


# Create the L1-dst VM
# Before actually creating it, let's ensure there is no VM with the same name
# is already configured
    - name: Destroy the guest L1-dst VM (in case name colision)
      virt:
        name: "{{ guest_l1_dst_name }}"
        state: destroyed
      ignore_errors: true
    
    - name: Undefine guest vm (in case name colision)
      virt:
        command: undefine
        name: "{{ guest_l1_dst_name }}"
      ignore_errors: true

    - name: Define the L1-dst VM
      virt:
        command: define
        name: "{{ guest_l1_dst_name}}"
        xml: "{{ lookup('template', 'nested-vdpa-net_guest_L1_dst.xml.j2') }}"
        autostart: no

    - name: Start the L1-dst VM
      virt:
        name: "{{ guest_l1_dst_name}}"
        state: running
        uri: qemu:///system
      register: l1_dst_vm_start_result

    - name: Get the IP address of the virtual machine L1-dst
      shell: virsh domifaddr {{ guest_l1_dst_name }}
      register: l1_dst_vm_ip_result
      ignore_errors: yes

    - name: Display the IP address of the virtual machine L1-dst
      debug:
        var: l1_dst_vm_ip_result
      when: l1_dst_vm_ip_result.rc == 0

    - debug: 
        msg: >
          "Now the Guest L1-dst VM is running. To go inside the L1-dst VM type
          virsh console {{ guest_l1_dst_name }}"
